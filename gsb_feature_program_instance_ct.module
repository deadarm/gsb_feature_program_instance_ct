<?php
/**
 * @file
 * Code for the GSB Feature Program Instance Content Type feature.
 */

include_once 'gsb_feature_program_instance_ct.features.inc';

/**
 * Implements hook_menu().
 */
function gsb_feature_program_instance_ct_menu() {
  $items = array();
  $items['gsb-feature-program-instance-ct/display-on-finder-update/node/%gsb_feature_program_instance_ct_entity_menu'] = array(
    'page callback' => 'gsb_feature_program_instance_ct_update_display_on_finder',
    'page arguments' => array(2, 3),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 2, 3),
    // This passes the $entity_type to the load function along with $entity_id.
    'load arguments' => array(2),
    // The callback will be returning AJAX, never HTML.
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  $items['gsb-feature-program-instance-ct/application-open-update/node/%gsb_feature_program_instance_ct_entity_menu'] = array(
    'page callback' => 'gsb_feature_program_instance_ct_update_application_open',
    'page arguments' => array(2, 3),
    'access callback' => 'entity_access',
    'access arguments' => array('update', 2, 3),
    // This passes the $entity_type to the load function along with $entity_id.
    'load arguments' => array(2),
    // The callback will be returning AJAX, never HTML.
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu loader for an entity.
 */
function gsb_feature_program_instance_ct_entity_menu_load($entity_id, $entity_type) {
  return entity_load_single($entity_type, $entity_id);
}

/**
 * Updates the display_on_finder for a program instance
 */
function gsb_feature_program_instance_ct_update_display_on_finder($entity_type, $entity) {

  $display_on_finder = '0';
  if ($_POST['display_on_finder'] == 'true') {
    $display_on_finder = '1';
  }

  // Load the entity and save the new value.
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $wrapper->field_display_on_finder = $display_on_finder;
  $wrapper->save();

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      array('command' => 'gsb_feature_program_instance_ct_update_display_on_finder_result'),
    ),
  );
}

/**
 * Updates the application_open for a program instance
 */
function gsb_feature_program_instance_ct_update_application_open($entity_type, $entity) {

  $application_open = '0';
  if ($_POST['application_open'] == 'true') {
    $application_open = '1';
  }

  // Load the entity and save the new value.
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $wrapper->field_is_application_open = $application_open;
  $wrapper->save();

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      array('command' => 'gsb_feature_program_instance_ct_update_application_open_result'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_program_instance_ct_form_node_form_alter(&$form, &$form_state) {
  $language = $form['language']['#value'];

  if ($form['#form_id'] == "program_node_form") {
    $form['field_search_field']['#attached'] = array(
      'js' => array(
        ctools_attach_js('gsb_feature_program_instance_ct', 'gsb_feature_program_instance_ct'),
      ),
    );
    return;
  }

  if ($form['#form_id'] != "program_instance_node_form") {
    return;
  }

  $form['#validate'][] = 'gsb_feature_program_instance_ct_node_validate';

  $form['field_display_on_finder']['#access'] = FALSE;
  unset($form['field_display_on_finder_select'][$language]['#options']['_none']);
  $form['field_display_on_finder_select'][$language]['#default_value'] = 'hidden';
  if ($form['field_display_on_finder'][$language]['#default_value'] == 1) {
    $form['field_display_on_finder_select'][$language]['#default_value'] = 'visible';
  }

  // Remove the n/a options for program format and program location category
  unset($form['field_program_location'][$language][0]['field_program_format'][$language]['#options']['_none']);
  unset($form['field_program_location'][$language][0]['field_program_location_category'][$language]['#options']['_none']);

  $form['field_search_field']['#attached'] = array(
    'js' => array(
      ctools_attach_js('gsb_feature_program_instance_ct_edit', 'gsb_feature_program_instance_ct'),
    ),
  );

  $form['field_brochure_pdf'][$language][0]['#description'] = '';

  if ($form['field_brochure_options']['und']['#default_value'] == null) {
    $form['field_brochure_options']['und']['#default_value'] = 'no_brochure_download';
  }

  $action = $form['#action'];

  if (strpos($action, "/gsb-node/ajax/add/program_instance/") !== FALSE) {
    $program_nid = str_replace("/gsb-node/ajax/add/program_instance/", "", $action);
    if (!empty($program_nid)) {
      $program_node = node_load($program_nid);
      $ref = $program_node->title . " (" . $program_nid . ")";
      $form['field_program'][$language][0]['target_id']['#default_value'] = $ref; //"Program X (407466)";
    }
  }

  // Remove the n/a options for program format and program location category
  unset($form['field_instance_date_text_select'][$language]['#options']['_none']);
  unset($form['field_instance_date_text_select'][$language]['#title']);

  // Remove the n/a option for brochure options radio buttons
  unset($form['field_brochure_options'][$language]['#options']['_none']);

  $form['field_instance_text']['#states'] = array(
    'visible' => array(
      ':input[name="field_instance_date_text_select[' . $language . ']"]' => array(
        array('value' => 'Text'),
      ),
    ),
  );
  $form['field_instance_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_instance_date_text_select[' . $language . ']"]' => array(
        array('value' => 'Date'),
      ),
    ),
  );

  $form['field_link_for_apply_button']['#states'] = array(
    'visible' => array(
      ':input[name="field_apower_id[' . $language . '][0][value]"]' => array('filled' => TRUE)
    ),
  );

  $form['field_link_apply_button']['#states'] = array(
    'required' => array(
      ':input[name="field_is_application_open[' . $language . ']"]' => array('checked' => TRUE),
    ),
  );

  // Visible state settings for the Brochure PDF upload and link fields

  $form['field_brochure_pdf']['#states'] = array(
    'invisible' => array(
      ':input[name="field_brochure_options[' . $language . ']"],value="brochure_link_pdf"' => array(
        '!value' => 'brochure_link_pdf',
      ),
      ':input[name="field_brochure_options[' . $language . ']"],value="brochure_link_ee_lead_form"' => array(
        '!value' => 'brochure_link_ee_lead_form',
      )
    ),
  );
  // 'value' => 'brochure_link_ee_lead_form',
  $form['field_download_brochure_link']['#states'] = array(
    'visible' => array(
      ':input[name="field_brochure_options[' . $language . ']"]' => array(
        'value' => 'brochure_link_other',
      )
    ),
  );

  // Fields on the 'Faculty' vertical tab...

  // set the Edit Faculty Page markup
  if (!empty($form['#node']) && !empty($form['#node']->field_program[$language][0]['target_id'])) {
    $program_node = node_load($form['#node']->field_program[$language][0]['target_id']);
    $edit_path = _gsb_feature_program_ct_create_ppp_path($program_node, 'faculty');
    $edit_path = drupal_lookup_path('source', $edit_path);
    if ($edit_path) {
      $edit_path = $edit_path . '/edit';
      $form['field_edit_faculty_page'][$language][0]['markup']['#markup'] = '<a href="/' . $edit_path . '" target="_blank">' . t('Edit Faculty Page') . '</a>';
    }
    else {
      unset($form['field_edit_faculty_page']);
    }
  }

  // Field Collection: Faculty Directors

  if (!empty($form['field_faculty_directors'][$language])) {

    foreach ($form['field_faculty_directors'][$language] as $index => $data) {

      if (is_integer($index)) {

        $form['field_faculty_directors'][$language][$index]['field_person_fac_single_ref']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_directors[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'UseEntityReference'),
            ),
          ),
        );
        $form['field_faculty_directors'][$language][$index]['field_other_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_directors[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_directors'][$language][$index]['field_image_single_public']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_directors[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_directors'][$language][$index]['field_link_single']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_directors[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_directors'][$language][$index]['field_academic_title']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_directors[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_directors'][$language][$index]['field_director_title_other']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_directors[' . $language . '][' . $index . '][field_faculty_director_title][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        // Remove the n/a options for field_faculty_or_other
        unset($form['field_faculty_directors'][$language][$index]['field_faculty_or_other'][$language]['#options']['_none']);

        // Remove the n/a options for field_faculty_director_title
        unset($form['field_faculty_directors'][$language][$index]['field_faculty_director_title'][$language]['#options']['_none']);

      }

    }
  }

  // Field Collection: Faculty 1

  if (!empty($form['field_faculty_1'][$language])) {

    foreach ($form['field_faculty_1'][$language] as $index => $data) {

      if (is_integer($index)) {

        $form['field_faculty_1'][$language][$index]['field_person_fac_single_ref']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_1[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'UseEntityReference'),
            ),
          ),
        );
        $form['field_faculty_1'][$language][$index]['field_other_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_1[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_1'][$language][$index]['field_image_single_public']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_1[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_1'][$language][$index]['field_link_single']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_1[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_1'][$language][$index]['field_academic_title']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_1[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        // Remove the n/a options for field_faculty_or_other
        unset($form['field_faculty_1'][$language][$index]['field_faculty_or_other'][$language]['#options']['_none']);
      }

    }
  }

  // Field Collection: Faculty 2

  if (!empty($form['field_faculty_2'][$language])) {

    foreach ($form['field_faculty_2'][$language] as $index => $data) {

      if (is_integer($index)) {

        $form['field_faculty_2'][$language][$index]['field_person_fac_single_ref']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_2[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'UseEntityReference'),
            ),
          ),
        );
        $form['field_faculty_2'][$language][$index]['field_other_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_2[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_2'][$language][$index]['field_image_single_public']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_2[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_2'][$language][$index]['field_link_single']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_2[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_faculty_2'][$language][$index]['field_academic_title']['#states'] = array(
          'visible' => array(
            ':input[name="field_faculty_2[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        // Remove the n/a options for field_faculty_or_other
        unset($form['field_faculty_2'][$language][$index]['field_faculty_or_other'][$language]['#options']['_none']);
      }

    }
  }

  // Field Collection: Guest and Advisors

  if (!empty($form['field_guest_speakers_advisors_fc'][$language])) {

    foreach ($form['field_guest_speakers_advisors_fc'][$language] as $index => $data) {

      if (is_integer($index)) {

        $form['field_guest_speakers_advisors_fc'][$language][$index]['field_person_fac_single_ref']['#states'] = array(
          'visible' => array(
            ':input[name="field_guest_speakers_advisors_fc[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'UseEntityReference'),
            ),
          ),
        );
        $form['field_guest_speakers_advisors_fc'][$language][$index]['field_other_name']['#states'] = array(
          'visible' => array(
            ':input[name="field_guest_speakers_advisors_fc[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_guest_speakers_advisors_fc'][$language][$index]['field_image_single_public']['#states'] = array(
          'visible' => array(
            ':input[name="field_guest_speakers_advisors_fc[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_guest_speakers_advisors_fc'][$language][$index]['field_link_single']['#states'] = array(
          'visible' => array(
            ':input[name="field_guest_speakers_advisors_fc[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );
        $form['field_guest_speakers_advisors_fc'][$language][$index]['field_academic_title']['#states'] = array(
          'visible' => array(
            ':input[name="field_guest_speakers_advisors_fc[' . $language . '][' . $index . '][field_faculty_or_other][' . $language . ']"]' => array(
              array('value' => 'Other'),
            ),
          ),
        );

        // Remove the n/a options for field_faculty_or_other
        unset($form['field_guest_speakers_advisors_fc'][$language][$index]['field_faculty_or_other'][$language]['#options']['_none']);
      }

    }
  }

}

/**
 * Handle validate for the Program Instance node
 */
function gsb_feature_program_instance_ct_node_validate($form, &$form_state) {
  if (!empty($form_state['values'])) {
    $language = $form['language']['#value'];
    if ($form_state['values']['field_display_on_finder_select'][$language][0]['value'] == 'visible') {
      $form_state['values']['field_display_on_finder'][$language][0]['value'] = 1;
    }
    else {
      $form_state['values']['field_display_on_finder'][$language][0]['value'] = 0;
    }
    if ($form_state['values']['field_is_application_open'][$language][0]['value'] == 1 && $form_state['values']['field_link_apply_button'][$language][0]['url'] == "") {
      $label = $form['field_link_apply_button'][$language]['#title'];
      form_set_error('field_link_apply_button]['.$language.'][0][url', $label . ' field is required.');
    }
    if ($form_state['values']['field_program_location']['und'][0]['field_program_format']['und'][0]['tid'] == null) {
      $errors = form_get_errors();
      if (empty($errors['field_program_location][und][0][field_program_format][und'])) {
        $label = $form['field_program_location']['und'][0]['field_program_format']['und']['#title'];
        form_set_error('field_program_location]['.$language.'][0][field_program_format['.$language.']', $label . ' field is required.');
      }
    }
    if ($form_state['values']['field_program_location']['und'][0]['field_program_location_category']['und'][0]['tid'] == null) {
      $errors = form_get_errors();
      if (empty($errors['field_program_location][und][0][field_program_location_category][und'])) {
        $label = $form['field_program_location']['und'][0]['field_program_location_category']['und']['#title'];
        form_set_error('field_program_location]['.$language.'][0][field_program_location_category['.$language.']', $label . ' field is required.');
      }
    }
  }
}

/**
 * Implements hook_field_attach_form().
 */
function gsb_feature_program_instance_ct_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // $langcode might be NULL.
  $langcode = $langcode ?: LANGUAGE_NONE;

  // If this is a field_module_schedule field collection, and the field_module_show_date is set,
  // setup the states for visibility

  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_module_schedule') {
    $map = array(
      '1' => array(
        'field_module_date',
      ),
    );

    // Build up the location of the field in the form.
    $parents = $form['#parents'];
    $parents[] = 'field_module_show_date';
    $parents[] = $langcode;
    $first = array_shift($parents);
    $parents = $first . '[' . implode('][', $parents) . ']';

    // Loop through each possible value for the field_module_show_date field,
    // controlling the visibility of the dependent fields.
    foreach ($map as $value => $fields) {
      foreach ($fields as $field) {
        $form[$field]['#states'] = array(
          'visible' => array(
            ':input[name="' . $parents . '"]' => array('checked' => TRUE),
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function gsb_feature_program_instance_ct_field_widget_link_field_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['field_name'] == 'field_program_location_link') {
    $element['#after_build'][] = 'gsb_feature_program_instance_ct_program_location_link_after_build';
  }
  if ($context['instance']['field_name'] == 'field_tuition') {
    $element['#after_build'][] = 'gsb_feature_program_instance_ct_program_tuition_link_after_build';
  }
}

/**
 * #after_build callback for changing the link widget text for the program location link.
 */
function gsb_feature_program_instance_ct_program_location_link_after_build($element, &$form_state) {
  $element['title']['#title'] = t('Location Name');
  return $element;
}

/**
 * #after_build callback for changing the link widget text for the program tuition link.
 */
function gsb_feature_program_instance_ct_program_tuition_link_after_build($element, &$form_state) {
  $element['title']['#title'] = t('Amount or Description');
  return $element;
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_program_instance_ct_field_extra_fields() {

  $extra = array();
  $extra['node']['program_instance']['display'] = array(
    'gsb_time_commitment' => array(
      'label' => t('Time Commitment'),
      'description' => t('Time Commitment'),
      'weight' => 0,
    ),
    'gsb_key_image' => array(
      'label' => t('Key Image'),
      'description' => t('Key Image'),
      'weight' => 0,
    ),
  );

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function gsb_feature_program_instance_ct_node_view($entity, $view_mode, $langcode) {

  if ($entity->type != 'program_instance') {
    return;
  }

  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);

  // Check if the 'time commitment' field is visible
  if (!empty($fields['gsb_time_commitment']['visible'])) {
    gsb_feature_program_instance_ct_time_commitment($entity, $view_mode, $langcode);
  }

  // Check if the 'key image' field is visible
  if (!empty($fields['gsb_key_image']['visible'])) {
    gsb_feature_program_ct_program_instance_ct_key_image($entity, $view_mode, $langcode);
  }

}

function gsb_feature_program_instance_ct_time_commitment($entity, $view_mode, $langcode) {
  $program_node = node_load($entity->field_program['und'][0]['target_id']);
  $time_commitment_term = taxonomy_term_load($program_node->field_time_commitment['und'][0]['tid']);
  $entity->content['gsb_time_commitment'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'gsb-time-commitment',
      ),
    ),
    '#children' => $time_commitment_term->name,
  );
}

function gsb_feature_program_ct_program_instance_ct_key_image($entity, $view_mode, $langcode) {
  $language = $entity->language;

  $program_node = node_load($entity->field_program[$language][0]['target_id']);
  if (!empty($program_node->field_image_key_image[$language][0])) {

    $key_image = theme('image' , array('path' => $program_node->field_image_key_image[$language][0]['uri']));

    $entity->content['gsb_key_image'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'gsb-key-image',
        ),
      ),
      '#children' => $key_image,
    );
  }

}
