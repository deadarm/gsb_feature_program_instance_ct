<?php
/**
 * @file
 * Code for the GSB Feature Program Instance Content Type feature.
 */

include_once 'gsb_feature_program_instance_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_program_instance_ct_form_node_form_alter(&$form, &$form_state) {
  $language = $form['language']['#value'];

  if ($form['#form_id'] != "program_instance_node_form") {
    return;
  }

  $action = $form['#action'];

  if (strpos($action, "/gsb-node/ajax/add/program_instance/") !== FALSE) {
    $program_nid = str_replace("/gsb-node/ajax/add/program_instance/", "", $action);
    if (!empty($program_nid)) {
      $program_node = node_load($program_nid);
      $ref = $program_node->title . " (" . $program_nid . ")";
      $form['field_program']['und'][0]['target_id']['#default_value'] = $ref; //"Program X (407466)";
    }
  }

  unset($form['field_instance_date_text_select']['und']['#options']['_none']);
  unset($form['field_instance_date_text_select']['und']['#title']);

  $form['field_instance_text']['#states'] = array(
    'visible' => array(
      ':input[name="field_instance_date_text_select[' . $language . ']"]' => array(
        array('value' => 'Text'),
      ),
    ),
  );
  $form['field_instance_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_instance_date_text_select[' . $language . ']"]' => array(
        array('value' => 'Date'),
      ),
    ),
  );

  $form['field_link_for_apply_button']['#states'] = array(
    'visible' => array(
      ':input[name="field_apower_id[und][0][value]"]' => array('filled' => TRUE)
    ),
  );

}

/**
 * Implements hook_field_attach_form().
 */
function gsb_feature_program_instance_ct_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // $langcode might be NULL.
  $langcode = $langcode ?: LANGUAGE_NONE;

  // If this is a field_module_schedule field collection, and the field_module_show_date is set,
  // setup the states for visibility

  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_module_schedule') {
    $map = array(
      '1' => array(
        'field_module_date',
      ),
    );

    // Build up the location of the field in the form.
    $parents = $form['#parents'];
    $parents[] = 'field_module_show_date';
    $parents[] = $langcode;
    $first = array_shift($parents);
    $parents = $first . '[' . implode('][', $parents) . ']';

    // Loop through each possible value for the field_module_show_date field,
    // controlling the visibility of the dependent fields.
    foreach ($map as $value => $fields) {
      foreach ($fields as $field) {
        $form[$field]['#states'] = array(
          'visible' => array(
            ':input[name="' . $parents . '"]' => array('checked' => TRUE),
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function gsb_feature_program_instance_ct_field_widget_link_field_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['field_name'] == 'field_program_location_link') {
    $element['#after_build'][] = 'gsb_feature_program_instance_ct_program_location_link_after_build';
  }
  if ($context['instance']['field_name'] == 'field_tuition') {
    $element['#after_build'][] = 'gsb_feature_program_instance_ct_program_tuition_link_after_build';
  }
}

/**
 * #after_build callback for changing the link widget text for the program location link.
 */
function gsb_feature_program_instance_ct_program_location_link_after_build($element, &$form_state) {
  $element['title']['#title'] = t('Name');
  return $element;
}

/**
 * #after_build callback for changing the link widget text for the program tuition link.
 */
function gsb_feature_program_instance_ct_program_tuition_link_after_build($element, &$form_state) {
  $element['title']['#title'] = t('Amount or Description');
  return $element;
}

